{"version":3,"sources":["components/SearchBar/index.ts","components/Movie/index.ts","components/SearchBar/SearchBar.hooks.ts","components/Movie/Movie.tsx","components/Movie/Movie.hooks.ts","utils/uniqBy.ts","components/SearchBar/SearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useSearchBar","useState","isLoading","setIsLoading","errorMsg","setErrorMsg","searchValue","setSearchValue","results","setResults","React","page","setPage","search","value","a","fetch","process","res","json","data","Response","Search","Error","message","useOnScreen","ref","isIntersecting","setIntersecting","useEffect","current","observer","IntersectionObserver","entry","observe","disconnect","OmdbMovie","movieId","useParams","useMovie","movie","className","Object","keys","length","alt","Title","src","Poster","Plot","Type","Year","Released","DVD","Actors","Director","Genre","Awards","BoxOffice","Country","Language","setMovie","others","uniqBy","arr","key","seen","Set","filter","item","k","has","add","SearchBar","inputValue","setInputValue","validInput","setValidInput","loaderRef","useRef","setData","isVisible","pre","onSubmit","e","preventDefault","onChange","target","placeholder","type","imdbID","map","result","to","join","App","path","Movie","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45e12e47.chunk.js","sourcesContent":["export * from './SearchBar.types'\nexport * from './SearchBar.hooks'\nexport { default } from './SearchBar'","export { default } from './Movie'\nexport * from './Movie.types'\nexport * from './Movie.hooks'","import React, { useEffect, useState } from \"react\";\nimport { SearchResponse } from \".\";\nimport { SearchItem } from \"./SearchBar.types\";\n\nexport const useSearchBar = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string>(\"\");\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n  const [results, setResults] = useState<SearchItem[]>([]);\n  const [page, setPage] = React.useState<number>(1);\n\n  const search = async (value: string, page: number = 1) => {\n    setIsLoading(true);\n    setErrorMsg('')\n\n    try {\n      const res = await fetch(\n        `${process.env.REACT_APP_API_URL}?s=${value}&apikey=${process.env.REACT_APP_API_KEY}&page=${page}`\n      );\n      const data: SearchResponse = await res.json();\n      const { Response, Search, Error: errorMsg } = data;\n      if (Response !== \"True\") {\n        throw new Error(errorMsg);\n      }\n      setResults(Search);\n    } catch (e: unknown) {\n      setErrorMsg((e as Error)?.message);\n      setResults([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    errorMsg,\n    isLoading,\n    search,\n    searchValue,\n    setSearchValue,\n    results,\n    page,\n    setPage,\n  };\n};\n\nexport const useOnScreen = (\n  ref: React.MutableRefObject<Element | undefined>\n) => {\n  const [isIntersecting, setIntersecting] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const observer = new IntersectionObserver(([entry]) =>\n      setIntersecting(entry.isIntersecting)\n    );\n\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return isIntersecting;\n};\n","import { useParams } from \"react-router-dom\";\nimport { useMovie } from \".\";\nimport \"./Movie.styles.css\";\n\nconst OmdbMovie = () => {\n  const { movieId } = useParams<{ movieId: string }>();\n  const { isLoading, errorMsg, movie } = useMovie(movieId);\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner\">\n        <i className=\"fa fa-spinner\"></i>\n      </div>\n    );\n  }\n\n  if (errorMsg !== \"\") {\n    return (\n      <p className=\"error\">\n        <i className=\"far fa-sad-cry\"></i> <i className=\"far fa-sad-cry\"></i>{\" \"}\n        <i className=\"far fa-sad-cry\"></i>\n        {errorMsg}\n      </p>\n    );\n  }\n\n  if (Object.keys(movie).length === 0) {\n    return null;\n  }\n\n  return (\n    <article className=\"movie\">\n      <figure>\n        <img\n          alt={movie.Title}\n          src={\n            movie.Poster === \"N/A\"\n              ? \"https://omdb.mathub.io/img/logo-omdb.png\"\n              : movie.Poster\n          }\n        />\n      </figure>\n      <section>\n        <h2>{movie.Title}</h2>\n        <h3>{movie.Plot}</h3>\n        <p><b>Type</b>: {movie.Type}</p>\n        <p><b>Year</b>: {movie.Year}</p>\n        <p><b>Released</b>: {movie.Released}</p>\n        {movie.DVD && <p><b>DVD</b>: {movie.DVD}</p>}\n        <p><b>Actors</b>: {movie.Actors}</p>\n        {movie.Director !=='N/A' && <p><b>Director</b>: {movie.Director}</p>}\n        <p><b>Genre</b>: {movie.Genre}</p>\n        {movie.Awards !== \"N/A\" && <p><b>Awards</b>: {movie.Awards}</p>}\n        {movie.BoxOffice && <p><b>BoxOffice</b>: {movie.BoxOffice}</p>}\n        <p><b>Country</b>: {movie.Country}</p>\n        <p><b>Language</b>: {movie.Language}</p>\n      </section>\n    </article>\n  );\n};\n\nexport default OmdbMovie;\n","import { useEffect, useState } from \"react\";\nimport { Movie } from \".\";\n\nexport const useMovie = (movieId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string>(\"\");\n  const [movie, setMovie] = useState<Partial<Movie>>({});\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      setErrorMsg(\"\");\n      try {\n        const res = await fetch(\n          `${process.env.REACT_APP_API_URL}?i=${movieId}&apikey=${process.env.REACT_APP_API_KEY}`\n        );\n        const data: Movie = await res.json();\n        const { Response, Error: errorMsg , ...others} = data;\n        if (Response !== \"True\") {\n          throw new Error(errorMsg);\n        }\n        setMovie(others);\n      } catch (e: unknown) {\n        setErrorMsg((e as Error)?.message);\n        setMovie({});\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    errorMsg,\n    isLoading,\n    movie,\n  };\n};\n","export function uniqBy<T extends Object>(\n  arr: T[],\n  key: (item: T) => T[keyof T]\n) {\n  const seen = new Set();\n  return arr.filter((item) => {\n    const k = key(item);\n    return seen.has(k) ? false : seen.add(k);\n  });\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { LegacyRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSearchBar, useOnScreen, SearchItem } from \"./\";\nimport {uniqBy} from '../../utils'\nimport \"./SearchBar.styles.css\";\n\nconst MIN_NUM_CHAR = 4;\n\nconst SearchBar = () => {\n  const { search, isLoading, errorMsg, results, page, setPage } =\n    useSearchBar();\n  const [inputValue, setInputValue] = React.useState<string>(\"\");\n  const [validInput, setValidInput] = React.useState<boolean>(true);\n  const loaderRef = React.useRef<Element | undefined>();\n  const [data, setData] = React.useState<SearchItem[]>([]);\n\n  const isVisible = useOnScreen(loaderRef);\n\n  const searchMovie = (e: React.FormEvent) => {\n    e.preventDefault();\n   \n    if(validInput) {\n      setData([]);\n      search(inputValue, 1);\n    } \n  };\n\n  React.useEffect(() => {\n    if (!validInput) return;\n    if (results.length === 0) return;\n    if (isVisible && !isLoading) {\n      setPage((pre) => pre + 1);\n    }\n  }, [isVisible, isLoading]);\n\n  React.useEffect(() => {\n    if (page > 1) {\n      search(inputValue, page);\n    }\n  }, [page]);\n\n  React.useEffect(() => {\n    if (results.length > 0) {\n      setData((pre) => [...pre, ...results]);\n    }\n  }, [results]);\n\n  return (\n    <>\n      <form className=\"search\" onSubmit={searchMovie}>\n        <label>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setInputValue(e.target?.value);\n              setValidInput(e.target?.value.length >= MIN_NUM_CHAR);\n            }}\n            value={inputValue}\n            placeholder=\"Search Movie Name\"\n            className=\"searchTerm\"\n          />\n          {!validInput && (\n            <p className=\"warning\">\n              Please type minimum {MIN_NUM_CHAR} characters and strike enter key!\n            </p>\n          )}\n        </label>\n        <button type=\"submit\" className=\"searchButton\">\n          <i className=\"fa fa-search\"></i>\n        </button>\n      </form>\n      <section className=\"results\">\n        <ul>\n          {uniqBy<SearchItem>(data, item => item.imdbID).map((result) => (\n            <li key={result.imdbID}>\n              <Link to={`/movie/${result.imdbID}`}>\n                <article>\n                  <figure>\n                    <img\n                      alt={result.Title}\n                      src={\n                        result.Poster === \"N/A\"\n                          ? \"https://omdb.mathub.io/img/logo-omdb.png\"\n                          : result.Poster\n                      }\n                    />\n                  </figure>\n                  <section>\n                    <h4>{result.Title}</h4>\n                    <p>{[result.Year, result.Type].join(\" \")}</p>\n                  </section>\n                </article>\n              </Link>\n            </li>\n          ))}\n        </ul>\n\n        <div\n          className=\"spinner\"\n          ref={loaderRef as LegacyRef<HTMLDivElement> | undefined}\n        >\n          {isLoading && <i className=\"fa fa-spinner\"></i>}\n        </div>\n        {errorMsg !== \"\" && (\n          <p className=\"error\">\n            <i className=\"far fa-sad-cry\"></i>{\" \"}\n            <i className=\"far fa-sad-cry\"></i>{\" \"}\n            <i className=\"far fa-sad-cry\"></i>\n            {errorMsg}\n          </p>\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default SearchBar;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport Movie from \"./components/Movie\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/movie/:movieId\">\n            <Movie />\n          </Route>\n          <Route path=\"/\">\n            <SearchBar />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}